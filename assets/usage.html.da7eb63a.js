import{r as p,o as c,c as l,a as s,b as a,w as r,F as i,d as n,e}from"./app.94aabcca.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const k={},d={class:"custom-container danger"},b=s("p",{class:"custom-container-title"},"DANGER",-1),m=s("strong",null,"This package won't be receiving any feature updates.",-1),h=n(" If you didn't see, you should check "),g={href:"https://github.com/open-southeners/laravel-apiable",target:"_blank",rel:"noopener noreferrer"},y=n("our next version of this package clicking here"),_=n("."),f=e(`<h1 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h1><p>How to use this on your Laravel website.</p><h2 id="custom-resource-type" tabindex="-1"><a class="header-anchor" href="#custom-resource-type" aria-hidden="true">#</a> Custom resource type</h2><p>To customise the resource type of a model you should:</p><ol><li>Add <code>SkoreLabs\\JsonApi\\Contracts\\JsonApiable</code> contract to the model class.</li><li>And add <code>resourceType</code> method to the model returning the type as a string.</li></ol><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Tests<span class="token punctuation">\\</span>Fixtures</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>JsonApiable</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token keyword">implements</span> <span class="token class-name">JsonApiable</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Get a custom resource type for JSON:API formatting.
     * 
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span> 
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">resourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;custom-post&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,6),w={class:"custom-container tip"},v=s("p",{class:"custom-container-title"},"TIP",-1),A=n("Just remember to check the allowed types in "),x={href:"https://jsonapi.org/format/#document-member-names",target:"_blank",rel:"noopener noreferrer"},I=n("the oficial JSON:API spec"),R=n("."),J=e(`<h2 id="authorisation" tabindex="-1"><a class="header-anchor" href="#authorisation" aria-hidden="true">#</a> Authorisation</h2><p>For authorize a resource or collection you&#39;ll need the <code>view</code> and <code>viewAny</code> on the <strong>model policy</strong>, which you can create passing the model to the make command:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>php artisan make:policy UserPolicy -m User
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="bypass-authorisation-locally" tabindex="-1"><a class="header-anchor" href="#bypass-authorisation-locally" aria-hidden="true">#</a> Bypass authorisation locally</h3><p>Alternatively, you can pass an authorisation (boolean) to the constructor of the resource like this:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// Forced to allow view the user</span>
<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonApiResource</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="bypass-authorisation-globally" tabindex="-1"><a class="header-anchor" href="#bypass-authorisation-globally" aria-hidden="true">#</a> Bypass authorisation globally</h3>`,7),S={class:"custom-container tip"},L=s("p",{class:"custom-container-title"},"TIP",-1),N=n("For this you need to be able to modify the config file of this package. If you miss how to expose it to your project check the "),P=n("Getting started"),E=n(" on the Installation page."),T=e(`<p>You could also disable all the authorisation globally by setting to true <code>view</code> and <code>viewAny</code> on the <code>config/json-api.php</code>.</p><p>Remember that <code>view</code> is checked for any single resource meanwhile <code>viewAny</code> is for check once one is on a resource collection of the same type.</p><h2 id="custom-api-resource-class" tabindex="-1"><a class="header-anchor" href="#custom-api-resource-class" aria-hidden="true">#</a> Custom API resource class</h2><p>Adding the <code>JSON_SERIALIZER</code> constant to your model class will point to a customised API resource:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * The class that serialize this model to JSON.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token constant">JSON_SERIALIZER</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>PostResource</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Also your JSON:API resource class should look like this:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Resources</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Auth</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>JsonApiResource</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostResource</span> <span class="token keyword">extends</span> <span class="token class-name">JsonApiResource</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Attach with the resource model relationships.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">withRelationships</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">resource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">resource</span><span class="token operator">-&gt;</span><span class="token function">loadMissing</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;author&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">withRelationships</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Attach additional attributes data.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">withAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;is_first_visit&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">last_accessed_at</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">,</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">mergeWhen</span><span class="token punctuation">(</span><span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">User</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">author</span><span class="token operator">-&gt;</span><span class="token property">id</span> <span class="token operator">===</span> <span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;is_author&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div>`,7);function F(q,C){const t=p("ExternalLinkIcon"),o=p("RouterLink");return c(),l(i,null,[s("div",d,[b,s("p",null,[m,h,s("a",g,[y,a(t)]),_])]),f,s("div",w,[v,s("p",null,[A,s("a",x,[I,a(t)]),R])]),J,s("div",S,[L,s("p",null,[N,a(o,{to:"/guide/#getting-started"},{default:r(()=>[P]),_:1}),E])]),T],64)}var B=u(k,[["render",F]]);export{B as default};
