import{r as e,o as l,c as i,a as s,b as a,w as p,F as r,d as n,e as o}from"./app.94aabcca.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const k={},d={class:"custom-container danger"},b=s("p",{class:"custom-container-title"},"DANGER",-1),h=s("strong",null,"This package won't be receiving any feature updates.",-1),g=n(" If you didn't see, you should check "),m={href:"https://github.com/open-southeners/laravel-apiable",target:"_blank",rel:"noopener noreferrer"},v=n("our next version of this package clicking here"),f=n("."),A=o(`<h1 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h1><p>This package also have some testing utilities built on top of PHPUnit and Laravel&#39;s framework assertions.</p><h2 id="assertions" tabindex="-1"><a class="header-anchor" href="#assertions" aria-hidden="true">#</a> Assertions</h2><p>Simple assert that your API route is returning a proper JSON:API response:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,5),_={class:"table-of-contents"},y=n("Assertions"),$=n("at"),w=n("atRelation"),x=n("hasAttribute"),J=n("hasAttributes"),q=n("hasId"),j=n("hasType"),R=n("hasAttributes"),S=n("hasAnyRelationships"),T=n("hasNotAnyRelationships"),L=n("hasRelationshipWith"),C=n("hasNotRelationshipWith"),N=o(`<h3 id="at" tabindex="-1"><a class="header-anchor" href="#at" aria-hidden="true">#</a> at</h3><p>Assert the resource at position of the collection starting by 0.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$jsonApi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="atrelation" tabindex="-1"><a class="header-anchor" href="#atrelation" aria-hidden="true">#</a> atRelation</h3><p>Assert the related model.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$relatedComment</span> <span class="token operator">=</span> <span class="token class-name static-context">Comment</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$jsonApi</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">atRelation</span><span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;content&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Foo bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="hasattribute" tabindex="-1"><a class="header-anchor" href="#hasattribute" aria-hidden="true">#</a> hasAttribute</h3><p>Assert the resource has the specified attribute key and value.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$jsonApi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="hasattributes" tabindex="-1"><a class="header-anchor" href="#hasattributes" aria-hidden="true">#</a> hasAttributes</h3><p>Assert the resource has the specified attributes keys and values.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$jsonApi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">hasAttributes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Hello world&#39;</span>
    <span class="token string single-quoted-string">&#39;slug&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;hello-world&#39;</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="hasid" tabindex="-1"><a class="header-anchor" href="#hasid" aria-hidden="true">#</a> hasId</h3><p>Assert the resource has the specified ID (or model key).</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$jsonApi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">hasId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="hastype" tabindex="-1"><a class="header-anchor" href="#hastype" aria-hidden="true">#</a> hasType</h3><p>Assert the resource has the specified type.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$jsonApi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">hasType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;post&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="hasattributes-1" tabindex="-1"><a class="header-anchor" href="#hasattributes-1" aria-hidden="true">#</a> hasAttributes</h3><p>Assert the resource has the specified attributes keys and values.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$jsonApi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">hasAttributes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Hello world&#39;</span>
    <span class="token string single-quoted-string">&#39;slug&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;hello-world&#39;</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="hasanyrelationships" tabindex="-1"><a class="header-anchor" href="#hasanyrelationships" aria-hidden="true">#</a> hasAnyRelationships</h3><p>Assert that the resource <strong>has any</strong> relationships with the specified <strong>resource type</strong>.</p><p>Second parameter is for assert that the response <strong>includes</strong> the relationship data at the <code>included</code>.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$jsonApi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">hasAnyRelationships</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;comment&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="hasnotanyrelationships" tabindex="-1"><a class="header-anchor" href="#hasnotanyrelationships" aria-hidden="true">#</a> hasNotAnyRelationships</h3><p>Assert that the resource <strong>doesn&#39;t have any</strong> relationships with the specified <strong>resource type</strong>.</p><p>Second parameter is for assert that the response <strong>doesn&#39;t includes</strong> the relationship data at the <code>included</code>.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$jsonApi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">hasNotAnyRelationships</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;comment&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="hasrelationshipwith" tabindex="-1"><a class="header-anchor" href="#hasrelationshipwith" aria-hidden="true">#</a> hasRelationshipWith</h3><p>Assert that the specific model resource <strong>is a</strong> relationship with the parent resource.</p><p>Second parameter is for assert that the response <strong>includes</strong> the relationship data at the <code>included</code>.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$relatedComment</span> <span class="token operator">=</span> <span class="token class-name static-context">Comment</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$jsonApi</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">hasRelationshipWith</span><span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="hasnotrelationshipwith" tabindex="-1"><a class="header-anchor" href="#hasnotrelationshipwith" aria-hidden="true">#</a> hasNotRelationshipWith</h3><p>Assert that the specific model resource <strong>is not</strong> a relationship with the parent resource.</p><p>Second parameter is for assert that the response <strong>doesn&#39;t includes</strong> the relationship data at the <code>included</code>.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">SkoreLabs<span class="token punctuation">\\</span>JsonApi<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$relatedComment</span> <span class="token operator">=</span> <span class="token class-name static-context">Comment</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertJsonApi</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$jsonApi</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">hasRelationshipWith</span><span class="token punctuation">(</span><span class="token variable">$relatedComment</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,37);function I(W,H){const c=e("ExternalLinkIcon"),t=e("RouterLink");return l(),i(r,null,[s("div",d,[b,s("p",null,[h,g,s("a",m,[v,a(c)]),f])]),A,s("nav",_,[s("ul",null,[s("li",null,[a(t,{to:"#assertions"},{default:p(()=>[y]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#at"},{default:p(()=>[$]),_:1})]),s("li",null,[a(t,{to:"#atrelation"},{default:p(()=>[w]),_:1})]),s("li",null,[a(t,{to:"#hasattribute"},{default:p(()=>[x]),_:1})]),s("li",null,[a(t,{to:"#hasattributes"},{default:p(()=>[J]),_:1})]),s("li",null,[a(t,{to:"#hasid"},{default:p(()=>[q]),_:1})]),s("li",null,[a(t,{to:"#hastype"},{default:p(()=>[j]),_:1})]),s("li",null,[a(t,{to:"#hasattributes-1"},{default:p(()=>[R]),_:1})]),s("li",null,[a(t,{to:"#hasanyrelationships"},{default:p(()=>[S]),_:1})]),s("li",null,[a(t,{to:"#hasnotanyrelationships"},{default:p(()=>[T]),_:1})]),s("li",null,[a(t,{to:"#hasrelationshipwith"},{default:p(()=>[L]),_:1})]),s("li",null,[a(t,{to:"#hasnotrelationshipwith"},{default:p(()=>[C]),_:1})])])])])]),N],64)}var V=u(k,[["render",I]]);export{V as default};
